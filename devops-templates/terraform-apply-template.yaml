jobs:
  - deployment: Deploy
    pool:
      vmImage: ${{ parameters.agentPool }}
    environment: ${{ parameters.environment }}
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: drop
            - task: Bash@3
              displayName: 'Show files'
              inputs:
                targetType: 'inline'
                script: 'ls -lash'
                workingDirectory: '$(Pipeline.Workspace)/drop/components/${{ parameters.component }}'
            - task: Bash@3
              displayName: "Add GitHub SSH host key"
              inputs:
                targetType: 'inline'
                script: |
                  mkdir -p ~/.ssh
                  if ! grep github.com ~/.ssh/known_hosts > /dev/null
                  then
                       echo "github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==" >> ~/.ssh/known_hosts
                  fi

            - task: TerraformCLI@0
              displayName: Init - ${{ parameters.environment }} - ${{ parameters.component }}
              inputs:
                command: 'init'
                backendType: 'azurerm'
                backendServiceArm: '${{ parameters.serviceConnectionName }}'
                backendAzureRmResourceGroupName: 'core-infra-${{ parameters.environment }}-rg'
                backendAzureRmStorageAccountName: 'cftappsdatademo'
                backendAzureRmContainerName: 'tfstate'
                backendAzureRmKey: '${{ parameters.resource_key }}/${{ parameters.environment }}.tfstate'
                workingDirectory: '$(Pipeline.Workspace)/drop/components/${{ parameters.component }}'
            - task: TerraformInstaller@0
              inputs:
                terraformVersion: ${{ parameters.terraformVersion }}
            - task: TerraformCLI@0
              displayName: Apply - ${{ parameters.environment }} - ${{ parameters.component }}
              inputs:
                command: 'apply'
                commandOptions: '${{ parameters.environment }}plan'
                environmentServiceName: '${{ parameters.serviceConnectionName }}'
                workingDirectory: '$(Pipeline.Workspace)/drop/components/${{ parameters.component }}'
